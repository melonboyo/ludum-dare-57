[gd_scene load_steps=28 format=4 uid="uid://bypjr8y06p4s8"]

[ext_resource type="Script" uid="uid://decgx4htb6mst" path="res://Player/player.gd" id="1_jsxo7"]
[ext_resource type="Script" uid="uid://3vlwxsi4ppa0" path="res://State/state_machine.gd" id="2_tt0xu"]
[ext_resource type="Script" uid="uid://d0r60pedvngr8" path="res://State/Player/player_idle.gd" id="3_px4ok"]
[ext_resource type="Script" uid="uid://bfovlhuml7g6t" path="res://State/Player/player_running.gd" id="4_1ytdt"]
[ext_resource type="Script" uid="uid://jxfnjgeo8k00" path="res://State/Player/player_in_air.gd" id="5_bevwc"]
[ext_resource type="Script" uid="uid://b07a8bl2w62wv" path="res://State/Player/player_frozen.gd" id="6_8xy6h"]
[ext_resource type="Script" uid="uid://bwtgohet3sh6" path="res://State/Player/player_on_ledge.gd" id="7_hnljh"]
[ext_resource type="Script" uid="uid://bfi36tipe2y84" path="res://State/Player/player_throwing.gd" id="8_x3vf3"]
[ext_resource type="Script" uid="uid://m5dwupf8sgvh" path="res://State/Player/player_climbing.gd" id="9_apopc"]
[ext_resource type="PackedScene" uid="uid://c64x5fukj4i1x" path="res://Player/rope_hinge.tscn" id="10_x3vf3"]

[sub_resource type="PortableCompressedTexture2D" id="PortableCompressedTexture2D_x3vf3"]
_data = PackedByteArray("")
size_override = Vector2(768, 640)

[sub_resource type="Animation" id="Animation_n7ghd"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [0, 1, 2]
}

[sub_resource type="Animation" id="Animation_bwjto"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [13, 14, 15]
}

[sub_resource type="Animation" id="Animation_urp6f"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [10, 11, 12]
}

[sub_resource type="Animation" id="Animation_ivps1"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [7, 8, 9]
}

[sub_resource type="Animation" id="Animation_nvl01"]
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.125, 0.2, 0.325),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [3, 4, 5, 6]
}

[sub_resource type="Animation" id="Animation_00tjw"]
length = 0.2
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [16, 17]
}

[sub_resource type="Animation" id="Animation_x3vf3"]
length = 0.18
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.06, 0.16),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [18, 19, 20]
}

[sub_resource type="Animation" id="Animation_apopc"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [21, 22, 23]
}

[sub_resource type="Animation" id="Animation_5htga"]
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [24, 25]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_606se"]
_data = {
&"climb": SubResource("Animation_5htga"),
&"idle": SubResource("Animation_n7ghd"),
&"jumpdown": SubResource("Animation_bwjto"),
&"jumpup": SubResource("Animation_urp6f"),
&"lay": SubResource("Animation_00tjw"),
&"lookup": SubResource("Animation_apopc"),
&"onledge": SubResource("Animation_ivps1"),
&"run": SubResource("Animation_nvl01"),
&"throw": SubResource("Animation_x3vf3")
}

[sub_resource type="CylinderShape3D" id="CylinderShape3D_m0snb"]
height = 1.6
radius = 0.4

[sub_resource type="Shader" id="Shader_a3atc"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_17ct1"]
render_priority = 0
shader = SubResource("Shader_a3atc")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="CylinderMesh" id="CylinderMesh_qqn03"]
height = 1.6

[sub_resource type="CylinderMesh" id="CylinderMesh_rfols"]
top_radius = 0.0
bottom_radius = 0.4
height = 1.0

[sub_resource type="CylinderShape3D" id="CylinderShape3D_x3vf3"]
height = 2.4
radius = 0.7

[node name="Player" type="CharacterBody3D" node_paths=PackedStringArray("animation")]
collision_layer = 2
axis_lock_linear_z = true
floor_constant_speed = true
floor_max_angle = 0.698132
floor_snap_length = 0.2
script = ExtResource("1_jsxo7")
walk_speed = 9.0
run_speed = 10.0
ground_acceleration = 80.0
air_acceleration = 45.0
jump_height = 1.7
max_fall_speed = 30.0
ledge_ray_length = 1.12
animation = NodePath("Sprite/AnimationPlayer")
rope_scene = ExtResource("10_x3vf3")

[node name="Sprite" type="Sprite3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.339843, 0)
pixel_size = 0.02
billboard = 2
shaded = true
texture_filter = 0
texture = SubResource("PortableCompressedTexture2D_x3vf3")
hframes = 6
vframes = 5
frame = 20
metadata/_aseprite_wizard_interface_config_ = {
"animation_section": true,
"layer_section": true,
"output_section": true,
"pending_changes": {},
"slice_section": true
}
metadata/_aseprite_wizard_config_ = {
"embed_tex": true,
"i_mode": 0,
"keep_anim_length": false,
"layers": [],
"o_ex_p": "",
"o_folder": "",
"o_name": "",
"only_visible": false,
"player": "Sprite/AnimationPlayer",
"slice": "",
"source": "res://Assets/Player/player.aseprite"
}
metadata/_aseprite_wizard_source_file_hash_ = "6e2ca4b76a8b8e82da504bc54ba389cd"

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite"]
libraries = {
&"": SubResource("AnimationLibrary_606se")
}

[node name="Shape" type="CollisionShape3D" parent="."]
shape = SubResource("CylinderShape3D_m0snb")

[node name="DebugMesh" type="MeshInstance3D" parent="."]
visible = false
material_override = SubResource("ShaderMaterial_17ct1")
mesh = SubResource("CylinderMesh_qqn03")

[node name="FaceMesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0.5)
visible = false
material_override = SubResource("ShaderMaterial_17ct1")
mesh = SubResource("CylinderMesh_rfols")

[node name="ClimbArea" type="Area3D" parent="."]
collision_layer = 0
collision_mask = 8
monitorable = false

[node name="Shape" type="CollisionShape3D" parent="ClimbArea"]
shape = SubResource("CylinderShape3D_x3vf3")
debug_color = Color(0.850012, 0.350085, 0.3487, 0.42)

[node name="LedgeRayCasts" type="Node3D" parent="."]

[node name="LedgeTopRayCasts" type="Node3D" parent="LedgeRayCasts"]
unique_name_in_owner = true

[node name="LedgeTopRayCast" type="RayCast3D" parent="LedgeRayCasts/LedgeTopRayCasts"]
unique_name_in_owner = true
target_position = Vector3(0, 0, 1.12)
debug_shape_custom_color = Color(0.8, 0.545098, 0, 0.32549)
debug_shape_thickness = 4

[node name="LedgeBottomRayCasts" type="Node3D" parent="LedgeRayCasts"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.46, 0)

[node name="LedgeBottomRayCast" type="RayCast3D" parent="LedgeRayCasts/LedgeBottomRayCasts"]
unique_name_in_owner = true
target_position = Vector3(0, 0, 1.12)
debug_shape_custom_color = Color(0.8, 0.545098, 0, 0.32549)
debug_shape_thickness = 4

[node name="LedgeCheckRayCasts" type="Node3D" parent="LedgeRayCasts"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.1, 1.12)

[node name="LedgeCheckRayCast" type="RayCast3D" parent="LedgeRayCasts/LedgeCheckRayCasts"]
unique_name_in_owner = true
target_position = Vector3(0, -1.9, 0)
debug_shape_custom_color = Color(0.8, 0.545098, 0, 0.32549)
debug_shape_thickness = 4

[node name="State" type="Node" parent="." node_paths=PackedStringArray("initial_state")]
script = ExtResource("2_tt0xu")
initial_state = NodePath("Idle")

[node name="Idle" type="Node" parent="State" node_paths=PackedStringArray("early_jump_buffer", "rope_cooldown_timer")]
script = ExtResource("3_px4ok")
early_jump_buffer = NodePath("../../EarlyJumpBuffer")
rope_cooldown_timer = NodePath("../../RopeThrowCooldown")

[node name="Running" type="Node" parent="State" node_paths=PackedStringArray("early_jump_buffer", "rope_cooldown_timer")]
script = ExtResource("4_1ytdt")
early_jump_buffer = NodePath("../../EarlyJumpBuffer")
rope_cooldown_timer = NodePath("../../RopeThrowCooldown")

[node name="InAir" type="Node" parent="State" node_paths=PackedStringArray("on_ledge_state", "early_jump_buffer", "ledge_top_ray", "ledge_bottom_ray", "ledge_check_ray")]
script = ExtResource("5_bevwc")
on_ledge_state = NodePath("../OnLedge")
early_jump_buffer = NodePath("../../EarlyJumpBuffer")
ledge_top_ray = NodePath("../../LedgeRayCasts/LedgeTopRayCasts/LedgeTopRayCast")
ledge_bottom_ray = NodePath("../../LedgeRayCasts/LedgeBottomRayCasts/LedgeBottomRayCast")
ledge_check_ray = NodePath("../../LedgeRayCasts/LedgeCheckRayCasts/LedgeCheckRayCast")

[node name="OnLedge" type="Node" parent="State" node_paths=PackedStringArray("ledge_top_ray", "ledge_bottom_ray", "ledge_check_ray", "ledge_timer", "ledge_leave_timer")]
script = ExtResource("7_hnljh")
ledge_top_ray = NodePath("../../LedgeRayCasts/LedgeTopRayCasts/LedgeTopRayCast")
ledge_bottom_ray = NodePath("../../LedgeRayCasts/LedgeBottomRayCasts/LedgeBottomRayCast")
ledge_check_ray = NodePath("../../LedgeRayCasts/LedgeCheckRayCasts/LedgeCheckRayCast")
ledge_timer = NodePath("../../OnLedgeTimer")
ledge_leave_timer = NodePath("../../LedgeLeaveTimer")

[node name="Throwing" type="Node" parent="State" node_paths=PackedStringArray("cooldown_timer")]
script = ExtResource("8_x3vf3")
cooldown_timer = NodePath("../../RopeThrowCooldown")

[node name="Climbing" type="Node" parent="State"]
script = ExtResource("9_apopc")

[node name="Frozen" type="Node" parent="State"]
script = ExtResource("6_8xy6h")

[node name="OnLedgeTimer" type="Timer" parent="."]
wait_time = 0.35
one_shot = true

[node name="LedgeLeaveTimer" type="Timer" parent="."]
wait_time = 0.15
one_shot = true
ignore_time_scale = true

[node name="EarlyJumpBuffer" type="Timer" parent="."]
wait_time = 0.09
one_shot = true
ignore_time_scale = true

[node name="RopeThrowCooldown" type="Timer" parent="."]
wait_time = 0.45
one_shot = true
ignore_time_scale = true

[connection signal="body_entered" from="ClimbArea" to="." method="_on_climb_area_body_entered"]
[connection signal="body_exited" from="ClimbArea" to="." method="_on_climb_area_body_exited"]
[connection signal="timeout" from="OnLedgeTimer" to="State/InAir" method="_on_ledge_timer_timeout"]
[connection signal="timeout" from="LedgeLeaveTimer" to="State/OnLedge" method="_on_ledge_leave_timer_timeout"]
